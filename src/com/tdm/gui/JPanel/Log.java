package com.tdm.gui.JPanel;

import com.tdm.config.Config;
import com.tdm.util.Method;
import java.awt.event.ItemEvent;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 *
 * @author tetradotoxina
 */
public class Log extends javax.swing.JPanel {

    public static final String INFO_LOG = "#333";
    public static final String WARNING_LOG = "#ec971f";
    public static final String SUCCESS_LOG = "#449d44";
    public static final String ERROR_LOG = "#c9302c";

    public static String logMsg = "";

    private int infoCount, warningCount, successCount, errorCount;

    private static final SimpleDateFormat sdf = new SimpleDateFormat("YYYY-MM-dd hh:mm:ss");

    public Log() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        lblInfo = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        lblWarning = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        lblSuccess = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        lblError = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        chInfo = new javax.swing.JCheckBox();
        chWarning = new javax.swing.JCheckBox();
        chSuccess = new javax.swing.JCheckBox();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        btnClear = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        editorPane = new javax.swing.JEditorPane();

        setLayout(new java.awt.BorderLayout());

        jToolBar1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 5));
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        lblInfo.setForeground(new java.awt.Color(0, 3, 51));
        lblInfo.setText("Info(0)");
        jToolBar1.add(lblInfo);
        jToolBar1.add(jSeparator3);

        lblWarning.setForeground(new java.awt.Color(236, 151, 31));
        lblWarning.setText("Warning(0)");
        jToolBar1.add(lblWarning);
        jToolBar1.add(jSeparator2);

        lblSuccess.setForeground(new java.awt.Color(68, 157, 68));
        lblSuccess.setText("Success(0)");
        jToolBar1.add(lblSuccess);
        jToolBar1.add(jSeparator1);

        lblError.setForeground(new java.awt.Color(255, 0, 0));
        lblError.setText("Error(0)");
        lblError.setOpaque(true);
        jToolBar1.add(lblError);
        jToolBar1.add(filler1);

        chInfo.setText("Info");
        chInfo.setFocusable(false);
        chInfo.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        chInfo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        chInfo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chInfoItemStateChanged(evt);
            }
        });
        jToolBar1.add(chInfo);

        chWarning.setText("Warning");
        chWarning.setFocusable(false);
        chWarning.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        chWarning.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        chWarning.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chWarningItemStateChanged(evt);
            }
        });
        jToolBar1.add(chWarning);

        chSuccess.setText("Success");
        chSuccess.setFocusable(false);
        chSuccess.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        chSuccess.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        chSuccess.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chSuccessItemStateChanged(evt);
            }
        });
        jToolBar1.add(chSuccess);
        jToolBar1.add(jSeparator4);

        btnClear.setText("Clear");
        btnClear.setFocusable(false);
        btnClear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnClear.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        jToolBar1.add(btnClear);

        add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        editorPane.setEditable(false);
        editorPane.setContentType("text/html"); // NOI18N
        jScrollPane1.setViewportView(editorPane);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void chInfoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chInfoItemStateChanged
        itemStateChanged(evt, "config.tdm.log.info", "panel.log.info","Info");
    }//GEN-LAST:event_chInfoItemStateChanged

    private void chWarningItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chWarningItemStateChanged
        itemStateChanged(evt, "config.tdm.log.warning", "panel.log.warning","Warning");
    }//GEN-LAST:event_chWarningItemStateChanged

    private void chSuccessItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chSuccessItemStateChanged
        itemStateChanged(evt, "config.tdm.log.success", "panel.log.success","Success");
    }//GEN-LAST:event_chSuccessItemStateChanged

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clear();
    }//GEN-LAST:event_btnClearActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JCheckBox chInfo;
    private javax.swing.JCheckBox chSuccess;
    private javax.swing.JCheckBox chWarning;
    private javax.swing.JEditorPane editorPane;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblError;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JLabel lblSuccess;
    private javax.swing.JLabel lblWarning;
    // End of variables declaration//GEN-END:variables

    private void init() {

        loadConfig();
        loadLang();
    }

    public void addLog(String msg,String type) {

        String date = sdf.format(new Date());
        String prefix;

        switch (type) {
            case INFO_LOG:
                if (chInfo.isSelected() == false) {
                    return;
                }
                prefix = Method.getLang("panel.log.info","Info");
                infoCount++;
                break;
            case WARNING_LOG:
                if (chWarning.isSelected() == false) {
                    return;
                }
                prefix = Method.getLang("panel.log.warning","Warning");
                warningCount++;
                break;
            case SUCCESS_LOG:
                if (chSuccess.isSelected() == false) {
                    return;
                }
                prefix = Method.getLang("panel.log.success","Success");
                successCount++;
                break;
            case ERROR_LOG:
                prefix = Method.getLang("panel.log.error","Error");
                errorCount++;
                break;
            default:
                prefix = type;
        }
        loadInfo();
        String newmsg = "<span style='color:" + type + ";font-size: small;'><b>[" + prefix + " " + date + "]</b> " + msg + "</span><br>";
        logMsg += newmsg;
        editorPane.setText(logMsg);
    }

    private void loadConfig() {
        String infoLog = Config.getConfig("config.tdm.log.info");
        String warningLog = Config.getConfig("config.tdm.log.warning");
        String successLog = Config.getConfig("config.tdm.log.success");

        if (infoLog.length() == 1 && Integer.parseInt(infoLog) == 1) {
            chInfo.setSelected(true);
        }

        if (warningLog.length() == 1 && Integer.parseInt(warningLog) == 1) {
            chWarning.setSelected(true);
        }

        if (successLog.length() == 1 && Integer.parseInt(successLog) == 1) {
            chSuccess.setSelected(true);
        }
    }

    private void loadInfo() {
        lblInfo.setText(Method.getLang("panel.log.info", "Info") + "(" + infoCount + ")");
        lblWarning.setText(Method.getLang("panel.log.warning", "Warning") + "(" + warningCount + ")");
        lblSuccess.setText(Method.getLang("panel.log.success", "Success") + "(" + successCount + ")");
        lblError.setText(Method.getLang("panel.log.error", "Error") + "(" + errorCount + ")");
    }

    public void loadLang() {
        Method.loadLang(chInfo, "panel.log.info");
        Method.loadLang(chWarning, "panel.log.warning");
        Method.loadLang(chSuccess, "panel.log.success");
        Method.loadLang(btnClear,"panel.log.clear");
        loadInfo();
    }

    private void clear() {
        logMsg = "";
        editorPane.setText("");
        infoCount = 0;
        warningCount = 0;
        successCount = 0;
        errorCount = 0;

        loadInfo();
    }

    public void itemStateChanged(ItemEvent evt, String config, String lang,String def) {
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            Config.setConfig(config, "1");
            addLog(Method.getLang(lang,def) + " | " + Method.getLang("msg.info.enable","Enable"), INFO_LOG);
        } else {
            Config.setConfig(config, "0");
            addLog(Method.getLang(lang,def) + " | " + Method.getLang("msg.info.disable","Disable"), INFO_LOG);
        }
    }
}
